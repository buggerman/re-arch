#!/bin/bash
#
# Re-Arch Single Command Installer
# Professional, opinionated Arch Linux installer
# https://re-arch.xyz
#

set -euo pipefail

# Debug mode - uncomment for troubleshooting
# set -x

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Logging functions
info() {
    echo -e "${BLUE}ℹ️  $1${NC}"
}

success() {
    echo -e "${GREEN}✅ $1${NC}"
}

warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

error() {
    echo -e "${RED}❌ $1${NC}" >&2
    echo "Script failed at line ${BASH_LINENO[0]}. Check the error above." >&2
    exit 1
}

# Validation functions
check_environment() {
    info "Validating installation environment..."
    
    # Check if running as root
    if [[ $EUID -ne 0 ]]; then
        error "This script must be run as root. Use: sudo bash"
    fi
    
    # Check if archinstall is available
    if ! command -v archinstall &> /dev/null; then
        error "archinstall not found. Are you running from Arch installation media?"
    fi
    
    # Check internet connectivity
    if ! ping -c 1 archlinux.org &>/dev/null; then
        error "No internet connection. Please connect to the internet first."
    fi
    
    # Check if we're in a live environment (basic check)
    if [[ ! -f /etc/arch-release ]]; then
        error "This doesn't appear to be an Arch Linux environment."
    fi
    
    success "Environment validation passed"
}

# Main installation function
run_installation() {
    echo ""
    echo "🚀 Re-Arch Single Command Installer"
    echo "===================================="
    echo ""
    info "Professional Arch Linux desktop system installation"
    echo ""
    
    warning "This will install a complete desktop system with:"
    echo "  • KDE Plasma desktop environment"
    echo "  • Linux Zen kernel for performance" 
    echo "  • Automatic Btrfs snapshots"
    echo "  • Security and optimization packages"
    echo ""
    warning "Default credentials: user/rearch (change after first login)"
    echo ""
    
    # Check if running in non-interactive mode (piped from curl)
    if [[ -t 0 ]]; then
        # Interactive mode - ask for confirmation
        read -p "Continue with installation? [y/N]: " -n 1 -r
        echo ""
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            echo "Installation cancelled."
            exit 0
        fi
    else
        # Non-interactive mode - auto-proceed with warning
        warning "Running in non-interactive mode - proceeding automatically"
        echo "To cancel, press Ctrl+C within 5 seconds..."
        sleep 5
    fi
    
    echo ""
    info "Step 1/2: Installing base system with archinstall..."
    echo "This may take 10-20 minutes depending on your internet connection."
    echo ""
    
    # Download and verify configs first
    info "Downloading configuration files..."
    if ! curl -fsSL https://re-arch.xyz/config.json > /tmp/re-arch-config.json; then
        error "Failed to download config.json"
    fi
    if ! curl -fsSL https://re-arch.xyz/creds.json > /tmp/re-arch-creds.json; then
        error "Failed to download creds.json"
    fi
    
    # Auto-detect the primary disk
    info "Detecting available disks..."
    PRIMARY_DISK=$(lsblk -dnpo NAME,SIZE,TYPE | grep "disk" | head -1 | awk '{print $1}')
    if [[ -z "$PRIMARY_DISK" ]]; then
        error "No disks detected. Please check your system."
    fi
    
    info "Using disk: $PRIMARY_DISK"
    warning "This will ERASE ALL DATA on $PRIMARY_DISK"
    
    # Clean the disk to prevent GPT header issues
    info "Cleaning disk to prevent partition table conflicts..."
    
    # Method 1: Use wipefs to remove filesystem signatures
    if command -v wipefs >/dev/null 2>&1; then
        info "Removing filesystem signatures..."
        wipefs --all --force "$PRIMARY_DISK" 2>/dev/null || true
    fi
    
    # Method 2: Use gdisk to fix GPT issues if available
    if command -v gdisk >/dev/null 2>&1; then
        info "Using gdisk to clean GPT structure..."
        # Use gdisk's expert mode to zap everything
        echo -e "x\nz\ny\ny" | gdisk "$PRIMARY_DISK" 2>/dev/null || true
    fi
    
    # Method 3: Use sgdisk to completely wipe partition tables
    if command -v sgdisk >/dev/null 2>&1; then
        info "Using sgdisk to zap all partition data..."
        sgdisk --zap-all "$PRIMARY_DISK" 2>/dev/null || true
        # Also clear any protective MBR
        sgdisk --clear --mbrtogpt "$PRIMARY_DISK" 2>/dev/null || true
    fi
    
    # Method 4: Zero out critical areas
    info "Zeroing critical disk areas..."
    # Zero out the first and last 10MB to clear partition tables
    dd if=/dev/zero of="$PRIMARY_DISK" bs=1M count=10 2>/dev/null || true
    
    # Get disk size and clear the end (backup GPT)
    DISK_SIZE=$(blockdev --getsize64 "$PRIMARY_DISK" 2>/dev/null || echo "0")
    if [[ "$DISK_SIZE" -gt 0 ]]; then
        LAST_MB=$((DISK_SIZE - 10*1024*1024))
        dd if=/dev/zero of="$PRIMARY_DISK" bs=1M count=10 seek=$((LAST_MB/1024/1024)) 2>/dev/null || true
    fi
    
    # Force kernel to re-read partition table multiple times
    partprobe "$PRIMARY_DISK" 2>/dev/null || true
    sleep 2
    partprobe "$PRIMARY_DISK" 2>/dev/null || true
    
    success "Disk cleaned with multiple methods"
    
    # Update config with detected disk
    sed -i "s|/dev/sda|$PRIMARY_DISK|g" /tmp/re-arch-config.json
    
    info "Configuration files prepared successfully"
    
    # Run archinstall with local configs, restoring stdin for interactivity
    info "Starting archinstall - you can review and modify the configuration before installing"
    echo "The configuration has been pre-loaded, but you can change any settings as needed."
    echo ""
    
    # Restore stdin from the terminal for archinstall to be interactive
    # We'll automatically answer "n" to the chroot prompt so we can handle it ourselves
    info "Running archinstall with configuration..."
    echo "If you see GPT errors, the disk cleaning may need manual intervention."
    echo "You can exit archinstall and run: gdisk $PRIMARY_DISK → x → z → y → y"
    echo ""
    
    ARCHINSTALL_EXIT_CODE=0
    printf "n\n" | archinstall --config /tmp/re-arch-config.json --creds /tmp/re-arch-creds.json || ARCHINSTALL_EXIT_CODE=$?
    
    if [[ $ARCHINSTALL_EXIT_CODE -eq 0 ]]; then
        success "Base system installation completed"
    else
        error "archinstall failed with exit code $ARCHINSTALL_EXIT_CODE. 
        
Common solutions:
1. GPT header issues - manually clean disk: gdisk $PRIMARY_DISK → x → z → y → y
2. Network issues - check internet connection
3. Disk space - ensure at least 20GB available
4. UEFI/BIOS settings - check boot mode

Check the output above for specific error details."
    fi
    
    echo ""
    info "Step 2/2: Optimizing system configuration..."
    echo "Configuring snapshots, services, and final optimizations..."
    echo ""
    
    # Check if /mnt exists and is mounted
    if ! mountpoint -q /mnt; then
        error "Installation target /mnt is not mounted. archinstall may have failed."
    fi
    
    # Run optimization script in chroot
    if arch-chroot /mnt bash -c "curl -fsSL https://re-arch.xyz/re-arch-lite.sh | bash"; then
        success "System optimization completed"
    else
        warning "Optimization script failed, but base system is installed"
        warning "You can manually run the optimization after reboot:"
        warning "curl -fsSL https://re-arch.xyz/re-arch-lite.sh | bash"
    fi
    
    echo ""
    echo "🎉 Installation Complete!"
    echo "========================"
    echo ""
    success "Your optimized Arch Linux desktop is ready!"
    echo ""
    info "Next steps:"
    echo "  1. Remove the installation USB/CD"
    echo "  2. Reboot your system"
    echo "  3. Login with: user / rearch"
    echo "  4. Change your password: passwd"
    echo "  5. Enjoy your new system!"
    echo ""
    
    # Check if running in non-interactive mode for reboot prompt
    if [[ -t 0 ]]; then
        # Interactive mode - ask about reboot
        read -p "Reboot now? [y/N]: " -n 1 -r
        echo ""
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            echo "Rebooting in 3 seconds..."
            sleep 3
            reboot
        else
            echo "Remember to reboot when ready!"
        fi
    else
        # Non-interactive mode - just remind to reboot
        echo "Remember to reboot when ready!"
        echo "Run: reboot"
    fi
}

# Main execution
main() {
    check_environment
    run_installation
}

# Always run main function when script is executed
main "$@"