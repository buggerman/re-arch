#!/bin/bash
#
# Re-Arch: Simple Arch Linux Desktop Installer
# One-command installation with desktop environment choice
# https://re-arch.xyz
#

set -euo pipefail

# Debug mode - set RE_ARCH_DEBUG=1 for verbose output
if [[ "${RE_ARCH_DEBUG:-0}" == "1" ]]; then
    set -x
fi

# Base URL configuration
# Can be overridden with: RE_ARCH_BASE_URL="./" ./install
BASE_URL="${RE_ARCH_BASE_URL:-https://re-arch.xyz}"

# Remove trailing slash if present
BASE_URL="${BASE_URL%/}"

# Helper function to download files (handles both URLs and local paths)
download_file() {
    local source="$1"
    local destination="$2"
    local description="$3"
    
    if [[ "$source" =~ ^https?:// ]]; then
        # Remote URL - use curl
        curl -fsSL "$source" > "$destination" || {
            error "Failed to download $description from $source. Check internet connection."
        }
    elif [[ -f "$source" ]]; then
        # Local file - copy directly
        cp "$source" "$destination" || {
            error "Failed to copy $description from $source."
        }
    else
        error "Cannot find $description at $source (not a valid URL or local file)"
    fi
}

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m'

# Logging functions
info() { echo -e "${BLUE}ℹ️  $1${NC}"; }
success() { echo -e "${GREEN}✅ $1${NC}"; }
warning() { echo -e "${YELLOW}⚠️  $1${NC}"; }
error() { echo -e "${RED}❌ $1${NC}" >&2; exit 1; }


# Desktop environment selection
select_desktop() {
    echo ""
    echo "🎨 Choose Desktop Environment:"
    echo "1) KDE Plasma (recommended - modern, feature-rich)"
    echo "2) GNOME (clean, user-friendly)"
    echo "3) XFCE (lightweight, traditional)"
    echo "4) Hyprland (tiling window manager)"
    echo ""
    
    while true; do
        read -r -p "Enter choice [1-4]: " choice
        case $choice in
            1) echo "kde"; break ;;
            2) echo "gnome"; break ;;
            3) echo "xfce"; break ;;
            4) echo "hyprland"; break ;;
            *) warning "Invalid choice. Please enter 1-4." ;;
        esac
    done
}

# Disk detection and selection
select_disk() {
    info "Available disks:"
    lsblk -dnpo NAME,SIZE,MODEL | grep "disk" | nl -v1
    
    echo ""
    local disks
    mapfile -t disks < <(lsblk -dnpo NAME | grep -E "(sd[a-z]|nvme[0-9]+n[0-9]+|vd[a-z])$")
    
    if [ ${#disks[@]} -eq 1 ]; then
        info "Auto-selecting: ${disks[0]}"
        echo "${disks[0]}"
        return
    fi
    
    while true; do
        read -r -p "Select disk number [1-${#disks[@]}]: " num
        if [[ "$num" =~ ^[0-9]+$ ]] && [ "$num" -ge 1 ] && [ "$num" -le "${#disks[@]}" ]; then
            echo "${disks[$((num-1))]}"
            break
        fi
        warning "Invalid selection. Enter a number between 1 and ${#disks[@]}."
    done
}
# Main installation function
main() {
    echo ""
    echo "🚀 Re-Arch: Simple Arch Linux Desktop Installer"
    echo "================================================"
    echo ""
    
    # Validate environment
    info "Validating installation environment..."
    [[ $EUID -eq 0 ]] || error "Must run as root. Use: sudo bash"
    command -v archinstall >/dev/null || error "archinstall not found. Are you on Arch installation media?"
    ping -c 1 archlinux.org >/dev/null || error "No internet connection. Please connect first."
    [[ -f /etc/arch-release ]] || error "This doesn't appear to be Arch Linux."
    
    success "Environment validation passed"
    
    # Get user choices
    local desktop
    desktop=$(select_desktop)
    local disk
    disk=$(select_disk)
    
    # Show summary and confirm
    echo ""
    warning "Installation Summary:"
    echo "  • Desktop Environment: $desktop"
    echo "  • Target Disk: $disk (ALL DATA WILL BE ERASED)"
    echo "  • Installation Time: ~25-35 minutes"
    echo "  • Default Login: user/rearch"
    echo ""
    
    read -r -p "Type 'YES' to continue or 'NO' to cancel: " confirm
    case "$confirm" in
        "YES") info "Starting installation..." ;;
        "NO"|*) echo "Installation cancelled."; exit 0 ;;
    esac
    
    # Clean disk to prevent issues
    info "Preparing disk $disk..."
    wipefs -af "$disk" 2>/dev/null || true
    if command -v sgdisk >/dev/null; then
        sgdisk --zap-all "$disk" 2>/dev/null || true
    fi
    partprobe "$disk" 2>/dev/null || true
    sleep 2
    
    # Prepare archinstall URLs
    info "Preparing installation for $desktop..."
    local config_url="${BASE_URL}/config-${desktop}.json"
    local creds_url="${BASE_URL}/creds.json"
    
    # Handle disk customization - we need to modify the config if disk != /dev/sda
    if [ "$disk" != "/dev/sda" ]; then
        info "Customizing config for disk: $disk"
        
        # Download config to modify disk setting
        download_file "$config_url" "/tmp/config.json" "configuration file"
        
        # Update disk in config
        sed -i "s|/dev/sda|$disk|g" /tmp/config.json
        
        # Use local modified config
        config_url="/tmp/config.json"
        info "Using modified config with disk: $disk"
    fi
    
    # Show what we're using
    info "Config URL: $config_url"
    info "Creds URL: $creds_url"
    
    # Validate URLs/files exist before passing to archinstall
    if [[ "$config_url" =~ ^https?:// ]]; then
        # Remote URL - test with curl
        if ! curl -fsSL --head "$config_url" >/dev/null; then
            error "Cannot access configuration at $config_url"
        fi
        if ! curl -fsSL --head "$creds_url" >/dev/null; then
            error "Cannot access credentials at $creds_url"
        fi
    else
        # Local file - check existence
        if [ ! -f "$config_url" ]; then
            error "Configuration file not found: $config_url"
        fi
        if [ ! -f "$creds_url" ]; then
            error "Credentials file not found: $creds_url"
        fi
    fi
    
    success "Configuration URLs validated"
    
    # Run archinstall with appropriate options
    info "Running archinstall (this may take 15-25 minutes)..."
    
    # Determine the right archinstall command based on config type
    if [[ "$config_url" =~ ^https?:// ]]; then
        # Remote URLs - use --config-url and --creds-url
        info "Using remote configuration URLs"
        info "Manual equivalent: archinstall --config-url $config_url --creds-url $creds_url"
        
        if ! archinstall --config-url "$config_url" --creds-url "$creds_url"; then
            error "archinstall failed. Try manual: archinstall --config-url $config_url --creds-url $creds_url"
        fi
    else
        # Local files - use --config and --creds
        info "Using local configuration files"
        info "Manual equivalent: archinstall --config $config_url --creds $creds_url"
        
        if ! archinstall --config "$config_url" --creds "$creds_url"; then
            error "archinstall failed. Try manual: archinstall --config $config_url --creds $creds_url"
        fi
    fi
    
    success "Base system installation completed!"
    
    # Run post-configuration
    info "Running post-installation configuration..."
    
    # Check if /mnt exists and is mounted
    if ! mountpoint -q /mnt; then
        error "Installation mount point /mnt not found or not mounted. archinstall may have failed."
    fi
    
    # Handle post-config script execution
    local lite_script_url="${BASE_URL}/re-arch-lite.sh"
    
    if [[ "$lite_script_url" =~ ^https?:// ]]; then
        # Remote URL - use curl directly in chroot (matches working manual method)
        info "Running post-config from URL: $lite_script_url"
        info "Manual equivalent: arch-chroot /mnt curl -fsSL $lite_script_url | bash"
        
        if ! arch-chroot /mnt curl -fsSL "$lite_script_url" | arch-chroot /mnt bash; then
            warning "Post-configuration had issues but system should still be bootable"
            warning "You can manually run: arch-chroot /mnt && curl -fsSL $lite_script_url | bash"
        fi
    else
        # Local file - copy and execute
        info "Running post-config from local file: $lite_script_url"
        
        # Download/copy the post-config script
        download_file "$lite_script_url" "/tmp/re-arch-lite.sh" "post-installation script"
        
        # Make it executable and copy to chroot
        chmod +x /tmp/re-arch-lite.sh
        cp /tmp/re-arch-lite.sh /mnt/tmp/re-arch-lite.sh
        
        if ! arch-chroot /mnt bash /tmp/re-arch-lite.sh; then
            warning "Post-configuration had issues but system should still be bootable"
            warning "You can manually run: arch-chroot /mnt && bash /tmp/re-arch-lite.sh"
        fi
    fi
    
    success "Installation complete!"
    echo ""
    info "Next steps:"
    echo "1. umount -R /mnt && reboot"
    echo "2. Login with: user/rearch (change password immediately)"
    echo "3. Install web browser: flatpak install flathub org.mozilla.firefox"
    echo "4. Update system: sudo pacman -Syu"
    echo ""
    success "Your optimized Arch Linux desktop is ready!"
}

main "$@"
