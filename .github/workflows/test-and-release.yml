name: Test and Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main ]

jobs:
  lint_and_validate:
    name: Lint and Validate
    runs-on: ubuntu-latest
    container: archlinux:latest
    
    steps:
      - name: Setup Arch Linux environment
        run: |
          pacman -Sy --noconfirm
          pacman -S --noconfirm git shellcheck bash python
          
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: List files for debugging
        run: |
          echo "Current directory contents:"
          ls -la
          echo ""
          echo "Checking required files:"
          test -f re-arch.sh && echo "✓ re-arch.sh exists" || echo "✗ re-arch.sh missing"
          test -f archinstall-config.json && echo "✓ archinstall-config.json exists" || echo "✗ archinstall-config.json missing"
          test -f validate-archinstall.py && echo "✓ validate-archinstall.py exists" || echo "✗ validate-archinstall.py missing"
          
      - name: Run ShellCheck on re-arch.sh
        run: |
          if test -f re-arch.sh; then
            shellcheck re-arch.sh
            echo "✓ ShellCheck passed"
          else
            echo "✗ re-arch.sh not found"
            exit 1
          fi
          
      - name: Validate script syntax
        run: |
          if test -f re-arch.sh; then
            bash -n re-arch.sh
            echo "✓ Bash syntax valid"
          else
            echo "✗ re-arch.sh not found"
            exit 1
          fi
          
      - name: Set script permissions
        run: |
          if test -f re-arch.sh; then
            chmod +x re-arch.sh
            echo "✓ Script permissions set"
          else
            echo "✗ re-arch.sh not found"
            exit 1
          fi
          
      - name: Validate archinstall configuration
        run: |
          if test -f validate-archinstall.py && test -f archinstall-config.json; then
            chmod +x validate-archinstall.py
            python3 validate-archinstall.py
            echo "✓ Archinstall configuration validated"
          else
            echo "✗ Validation files not found"
            exit 1
          fi
          
      - name: Validate JSON syntax
        run: |
          if test -f archinstall-config.json; then
            python3 -m json.tool archinstall-config.json > /dev/null
            echo "✓ JSON syntax valid"
          else
            echo "✗ archinstall-config.json not found"
            exit 1
          fi

  create_release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: lint_and_validate
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Get release version
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          name: Release ${{ steps.get_version.outputs.VERSION }}
          body: |
            ## The Re-Arch Procedure ${{ steps.get_version.outputs.VERSION }}
            
            Professional automation script for transforming minimal Arch Linux installations.
            
            ### Installation
            ```bash
            curl -L -o re-arch.sh https://github.com/buggerman/re-arch/releases/download/${{ steps.get_version.outputs.VERSION }}/re-arch.sh
            chmod +x re-arch.sh
            ```
            
            ### Usage
            1. Edit the script to set your USERNAME
            2. Run from within a chroot environment as root
            3. Follow the interactive prompts
            
            **⚠️ WARNING: Only run on fresh, minimal Arch Linux installations with Btrfs root filesystem.**
            
            ### What's Included
            - KDE Plasma desktop environment
            - Performance optimizations (linux-zen, ananicy-cpp)
            - Snapshot management (snapper, grub-btrfs)
            - Modern audio system (PipeWire)
            - Security (firewalld)
            - Package managers (paru, Flatpak, LinuxBrew)
            
            See README.md for complete documentation.
          files: |
            re-arch.sh
            archinstall-config.json
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}