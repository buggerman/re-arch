name: Test and Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main ]

jobs:
  lint_and_validate:
    name: Lint and Validate
    runs-on: ubuntu-latest
    container: archlinux:latest
    
    steps:
      - name: Setup Arch Linux environment
        run: |
          pacman -Sy --noconfirm
          pacman -S --noconfirm git shellcheck bash python
          # Verify tools are available
          shellcheck --version
          python3 --version
          
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: List files for debugging
        run: |
          echo "Current directory contents:"
          ls -la
          echo ""
          echo "Current working directory: $(pwd)"
          echo "User: $(whoami)"
          echo "Python version: $(python3 --version)"
          echo "ShellCheck version: $(shellcheck --version | head -2)"
          echo ""
          echo "Checking required files:"
          test -f re-arch.sh && echo "✓ re-arch.sh exists" || echo "✗ re-arch.sh missing"
          test -f re-arch-lite.sh && echo "✓ re-arch-lite.sh exists" || echo "✗ re-arch-lite.sh missing"
          test -f install && echo "✓ install exists" || echo "✗ install missing"
          test -f config.json && echo "✓ config.json exists" || echo "✗ config.json missing"
          test -f creds.json && echo "✓ creds.json exists" || echo "✗ creds.json missing"
          test -f validate-archinstall.py && echo "✓ validate-archinstall.py exists" || echo "✗ validate-archinstall.py missing"
          
      - name: Run ShellCheck on scripts
        run: |
          echo "Running ShellCheck on all shell scripts..."
          for script in re-arch.sh re-arch-lite.sh install; do
            if test -f "$script"; then
              echo "Checking $script..."
              shellcheck "$script"
              echo "✓ ShellCheck passed for $script"
            else
              echo "✗ $script not found, skipping"
            fi
          done
          
      - name: Validate script syntax
        run: |
          echo "Validating bash syntax for all shell scripts..."
          for script in re-arch.sh re-arch-lite.sh install; do
            if test -f "$script"; then
              echo "Validating syntax for $script..."
              bash -n "$script"
              echo "✓ Bash syntax valid for $script"
            else
              echo "✗ $script not found, skipping"
            fi
          done
          
      - name: Set script permissions
        run: |
          echo "Setting executable permissions for all shell scripts..."
          for script in re-arch.sh re-arch-lite.sh install; do
            if test -f "$script"; then
              chmod +x "$script"
              echo "✓ Permissions set for $script"
            else
              echo "✗ $script not found, skipping"
            fi
          done
          
      - name: Validate archinstall configuration
        run: |
          if test -f validate-archinstall.py && test -f config.json; then
            chmod +x validate-archinstall.py
            python3 validate-archinstall.py
            echo "✓ Archinstall configuration validated"
          else
            echo "✗ Validation files not found"
            exit 1
          fi
          
      - name: Validate JSON syntax
        run: |
          echo "Validating JSON files..."
          for json in config.json creds.json; do
            if test -f "$json"; then
              echo "Validating $json..."
              python3 -m json.tool "$json" > /dev/null
              echo "✓ JSON syntax valid for $json"
            else
              echo "✗ $json not found"
              exit 1
            fi
          done

  create_release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: lint_and_validate
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Get release version
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          name: Release ${{ steps.get_version.outputs.VERSION }}
          body: |
            ## The Re-Arch Procedure ${{ steps.get_version.outputs.VERSION }}
            
            Professional automation script for transforming minimal Arch Linux installations.
            
            ### Installation
            ```bash
            curl -L -o re-arch.sh https://github.com/buggerman/re-arch/releases/download/${{ steps.get_version.outputs.VERSION }}/re-arch.sh
            chmod +x re-arch.sh
            ```
            
            ### Usage
            1. Edit the script to set your USERNAME
            2. Run from within a chroot environment as root
            3. Follow the interactive prompts
            
            **⚠️ WARNING: Only run on fresh, minimal Arch Linux installations with Btrfs root filesystem.**
            
            ### What's Included
            - KDE Plasma desktop environment
            - Performance optimizations (linux-zen, ananicy-cpp)
            - Snapshot management (snapper, grub-btrfs)
            - Modern audio system (PipeWire)
            - Security (firewalld)
            - Package managers (paru, Flatpak, LinuxBrew)
            
            See README.md for complete documentation.
          files: |
            re-arch.sh
            re-arch-lite.sh
            install
            config.json
            creds.json
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}